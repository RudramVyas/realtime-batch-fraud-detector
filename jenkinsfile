pipeline {
  agent {
    kubernetes {
      label 'python-agent'
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: python
    image: python:3.8-slim
    command:
    - cat
    tty: true
  restartPolicy: Never
"""
    }
  }

  environment {
    VENV_DIR = 'unit_testing_bd'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Setup Python Environment') {
      steps {
        container('python') {
          sh '''
            python3 -m venv $VENV_DIR
            . $VENV_DIR/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
          '''
        }
      }
    }

    stage('Run ETL Unit Tests') {
      steps {
        container('python') {
          sh '''
            . $VENV_DIR/bin/activate
            mkdir -p test-reports
            pytest --cache-clear test/test_etl_to_postgres.py --html=test-reports/etl-report.html --self-contained-html
          '''
        }
      }
    }

    stage('Run API Unit Tests') {
      steps {
        container('python') {
          sh '''
            . $VENV_DIR/bin/activate
            pytest --cache-clear test/test_stream_api.py --html=test-reports/api-report.html --self-contained-html
          '''
        }
      }
    }

    // stage('Publish Test Results') {
    //   steps {
    //     script {
    //       // Publish both reports if they exist
    //       junit allowEmptyResults: true, testResults: 'test-reports/test-results-*.xml'
    //     }
    //     archiveArtifacts artifacts: 'test-reports/test-results-*.xml', fingerprint: true
    //   }
    // }
stage('Push HTML Reports to GitHub') {
  steps {
    container('python') {
      withCredentials([string(credentialsId: 'github-pat', variable: 'GITHUB_TOKEN')]) {
        sh '''
          apt-get update && apt-get install -y git

          git config --global user.email "jenkins@example.com"
          git config --global user.name "Jenkins CI"

          git clone --branch dev_testing https://$GITHUB_TOKEN@github.com/tc349/Big_Data_Project.git temp-repo

          mkdir -p temp-repo/test/reports
          cp -r test-reports/*.html temp-repo/test/reports/

          cd temp-repo
          git add test/reports/*.html
          git commit -m "Update HTML test reports from Jenkins build ${BUILD_NUMBER}" || echo "No changes to commit"
          git push origin dev_testing
        '''
      }
    }
  }
}





    stage('Debug Workspace') {
      steps {
        container('python') {
          sh 'echo "WORKSPACE=$WORKSPACE" && ls -la $WORKSPACE'
        }
      }
    }

    stage('Fix Permissions') {
      steps {
        container('python') {
          sh '''
            echo "Making workspace writable..."
            chmod -R u+w $WORKSPACE || true
          '''
        }
      }
    }
  }

  post {
      always {
        container('python') {
          sh '''
            echo "Cleaning pytest and Python cache folders to avoid permission issues..."
            rm -rf data_ingestion_postgres/src/.pytest_cache || true
            rm -rf api/src/.pytest_cache || true

            # Find and clean __pycache__ directories safely
            for dir in $(find . -type d -name '__pycache__'); do
              chmod -R u+w "$dir" || true
              rm -rf "$dir" || true
            done
          '''
        }
      }
    }

}
