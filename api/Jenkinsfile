pipeline {
    agent any
    environment {
        VENV_DIR = 'venv'
        DOCKER_IMAGE = 'tc349/streaming-data-api:v2'
        FLASK_APP_PORT = '5310'
        SERVER_IP = '18.134.163.221' // Replace with your server's public IP
    }
    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/tc349/Big_Data_Project.git', branch: 'feature/streaming-data-api'
            }
        }
        stage('Set Up Virtual Environment') {
            steps {
                script {
                    // Create a virtual environment
                    sh 'python3 -m venv ${VENV_DIR}'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    // Activate virtual environment, upgrade pip, and install dependencies
                    sh '''
                        source ${VENV_DIR}/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                    '''
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} -f api/Dockerfile api'
                }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'tc349-hub', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh 'echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin'
                    }
                    // Push the image
                    sh 'docker push ${DOCKER_IMAGE}'
                }
            }
        }
        stage('Create Kubernetes Secrets and ConfigMaps') {
            steps {
                script {
                    // Create ConfigMap for non-sensitive data
                    sh '''
                        kubectl create configmap db-config \
                            --from-literal=DB_HOST=172.31.14.3 \
                            --from-literal=DB_NAME=testdb
                            --from-literal=TABLE_NAME=cc_fraud_streaming_data
                    '''
                    // Create Secret for sensitive data using Jenkins credentials
                    withCredentials([string(credentialsId: 'db-username', variable: 'DB_USERNAME'),
                                     string(credentialsId: 'db-password', variable: 'DB_PASSWORD')]) {
                        sh '''
                            kubectl create secret generic db-credentials \
                                --from-literal=DB_USERNAME=${DB_USERNAME} \
                                --from-literal=DB_PASSWORD=${DB_PASSWORD}
                        '''
                    }
                }
            }
        stage('Verify Deployment Files') {
            steps {
                script {
                    // Verify that the deployment files exist
                    sh 'ls -al api/k8s/'
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Apply the Kubernetes deployment and service files
                    sh '''
                    kubectl apply -f api/k8s/deployment.yaml
                    kubectl apply -f api/k8s/service.yaml
                    '''
                }
            }
        }
    }
    post {
        success {
            // Output the full URL to access the Flask API
            echo "Build succeeded. The Flask API is running at http://${SERVER_IP}:${FLASK_APP_PORT}/data"
        }
    }
}