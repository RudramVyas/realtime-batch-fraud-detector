pipeline {
    agent any
    environment {
        VENV_DIR = 'venv'
        DOCKER_IMAGE = 'rdv100/train_rf:1.5'
        KUBECONFIG = credentials('kubeconfig-file') // Reference the kubeconfig credential
        KUBE_NAMESPACE  = 'default'
    }
    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/tc349/Big_Data_Project.git', branch: 'feature/ml-model'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} -f ml/create_model/Dockerfile ml/create_model'
                }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'rdv-hub', usernameVariable: 'RDV_DKR_HUB_USERNAME', passwordVariable: 'RDV_DKR_HUB_PASSWORD')]) {
                        sh 'echo ${RDV_DKR_HUB_PASSWORD} | docker login -u ${RDV_DKR_HUB_USERNAME} --password-stdin'
                    }
                    // Push the image
                    sh 'docker push ${DOCKER_IMAGE}'
                }
            }
        }
        stage('Verify Deployment Files') {
            steps {
                script {
                    // Verify that the deployment files exist
                    sh 'ls -al ml/create_model'
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Apply the Kubernetes deployment and service files
                    sh 'kubectl delete job rf-train --ignore-not-found=true'
                    sh 'kubectl apply -f ml/create_model/deployment.yaml'
                }
            }
        }
    }
    post {
        success {
            // Output the full URL to access the Flask API
            echo "Build succeeded. Model stored in EC2 ( /home/ec2-user/BigData_May/bd_class_project/ml/all_ml/model )"
        }
    }
}